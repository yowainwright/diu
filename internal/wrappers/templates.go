package wrappers

const wrapperTemplate = `#!/bin/bash
# DIU wrapper for {{.Tool}}
# Auto-generated by DIU - Do I Use Package Tracker

# Original binary path
ORIGINAL="{{.OriginalPath}}"

# DIU API endpoint
DIU_API="{{.APIEndpoint}}"

# Capture start time
START_TIME=$(date +%s%N)
WORKING_DIR=$(pwd)

# Execute the original command
"$ORIGINAL" "$@"
EXIT_CODE=$?

# Capture end time and calculate duration
END_TIME=$(date +%s%N)
DURATION=$(( ($END_TIME - $START_TIME) / 1000000 ))

# Build JSON payload
build_json() {
    local args_json="["
    local first=true
    for arg in "$@"; do
        if [ "$first" = true ]; then
            first=false
        else
            args_json="$args_json,"
        fi
        # Escape quotes and backslashes in arguments
        escaped_arg=$(echo "$arg" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
        args_json="$args_json\"$escaped_arg\""
    done
    args_json="$args_json]"

    cat <<EOF
{
    "tool": "{{.Tool}}",
    "command": "$ORIGINAL $*",
    "args": $args_json,
    "exit_code": $EXIT_CODE,
    "duration_ms": $DURATION,
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "working_dir": "$WORKING_DIR",
    "user": "$(whoami)"
}
EOF
}

# Send execution data to DIU daemon (non-blocking)
{
    if command -v curl >/dev/null 2>&1; then
        build_json "$@" | curl -X POST "$DIU_API" \
            -H "Content-Type: application/json" \
            -d @- \
            --silent \
            --fail \
            --connect-timeout 1 \
            --max-time 2 \
            2>/dev/null
    fi
} &

# Exit with the original command's exit code
exit $EXIT_CODE
`

const simpleWrapperTemplate = `#!/bin/bash
# DIU simple wrapper for {{.Tool}}

ORIGINAL="{{.OriginalPath}}"
DIU_SOCKET="/tmp/diu.sock"

# Run original command
"$ORIGINAL" "$@"
EXIT_CODE=$?

# Log to DIU if socket exists
if [ -S "$DIU_SOCKET" ]; then
    {
        echo "{{.Tool}}|$*|$(date +%s)|$EXIT_CODE|$(pwd)|$(whoami)"
    } | nc -U "$DIU_SOCKET" 2>/dev/null &
fi

exit $EXIT_CODE
`